#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "bst.h"
#include "memory.h"
#include "my_alloc.h"
#include "llist.h"

extern bst* avail_mem;

int main()
{
	printf("split memory testing\n");
	memory *test_1 = allocate_memory_page();
	printf("%d \n",test_1);
	printf("%d \n",test_1->addr);
	void* split_1 = split_memory(test_1,128);
	printf("Test 1 memory check: %d. \n",test_1);
	printf("Test 1 memory size check: %d. \n",*test_1);
	printf("Splitting Chunk of 128 off of test 1.\n");
	printf("Split 1 Mem. Add. : %d \n",split_1);
	unsigned int *split_1_size = split_1 - 8;
	printf("Split_1_size Add. : %d \n",split_1_size);
	printf("Split_1_size Size. : %d \n",*split_1_size);

	printf("\n--------------------MY_MALLOC TESTING-----------------------\n");
	init_alloc();
	memory *head_node = allocate_memory_page();
	bst_insert(avail_mem,head_node);
	printf("Initial Tree: ");
	printing_tree(avail_mem->root);
	

	void* malloc_small = my_malloc(201);
	unsigned int* malloc_small_size = malloc_small - 8;
	
	printf("malloc_small (input size 201) address: %d (should be +3880 diff). \n", malloc_small);
	printf("malloc_small_size (input size 201): %d (should be 208). \n", *malloc_small_size);

	my_free(malloc_small);
	printing_tree(avail_mem->root);
	
	void* malloc_med = my_malloc(3000);
	unsigned int* malloc_med_size = malloc_med - 8;
	printf("malloc_med (input size 3000) address: %d. \n", malloc_med);
	printf("malloc_med_size (input size 3000): %d (should be 3000). \n", *malloc_med_size);
	my_free(malloc_med);
	printing_tree(avail_mem->root);

	void* malloc_large = my_malloc(4000);
	unsigned int* malloc_large_size = malloc_large - 8;
	printf("malloc_large (input size 4000) address: %d. \n", malloc_large);
	printf("malloc_large_size (input size 4000): %d (should be 4000). \n", *malloc_large_size);
	my_free(malloc_large);
	printing_tree(avail_mem->root);

	memory *small = memory_new(malloc_small,208);
	memory* test_merge1 = merge_memory(malloc_large,malloc_small);
	memory_print(test_merge1); //should print nothing.

	memory* test_merge2 = merge_memory(head_node,small);
	memory_print(test_merge2);

	//bst* merged_tree = bst_merging(avail_mem);
	//printing_tree(merged_tree->root);

	//print_memory();
	
	return 0;
}
