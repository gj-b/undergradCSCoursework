#include <stdlib.h>
#include <stdio.h>

void print_tic_tac_toe_board( char board[3][3] )
{
	unsigned int i, j;
	for(i=0;i<3;i++)
	{
		for(j=0;j<3;j++)
		{
			printf("%c ",board[i][j]);
		}
		printf("\n");
	}
}

void init_board(char board[3][3])
{
    // Grader: If you start at 0 and go until i < 4 (aka i = 3), how many slots are you
    // looking at?
	for(int i=0; i<4; i++)
	{
		for(int j=0; j<4; j++)
		{
			board[i][j] = '*';
		}
	}
}	

unsigned int place_piece(char board[3][3], char player, unsigned int row, unsigned int col)
{
	if(board[row][col] == '*')
	{
		board[row][col] = player;
		return 1;
	}
	else
	{
		return 0;
	}
}

void reset_board(char board[3][3], unsigned int row, unsigned int col)
{
	board[row][col] = '*';
}

int player_won(char board[3][3], char player, unsigned int row, unsigned int col)
{
	int won,piece;

	piece = place_piece(board,player,row,col);
	//8 possible winning solutions. 
    // Grader: You were given the row and col of the previously placed piece so
    // that you only need to check whether there's a win in the
    // rows/columns/diagonals that the played piece is in. It's inefficient to
    // check every spot every time
	if  (((board[0][0] == player) && (board[0][1] == player) && (board[0][2] == player))
		||
		((board[1][0] == player) && (board[1][1] == player) && (board[1][2] == player))
		||
		((board[2][0] == player) && (board[2][1] == player) && (board[2][2] == player))
		||
		((board[0][0] == player) && (board[1][0] == player) && (board[2][0] == player))
		||
		((board[0][1] == player) && (board[1][1] == player) && (board[2][1] == player))
		||
		((board[0][2] == player) && (board[1][2] == player) && (board[2][2] == player))
		||
		((board[0][0] == player) && (board[1][1] == player) && (board[2][2] == player))
		||
		((board[2][0] == player) && (board[1][1] == player) && (board[0][2] == player)))
	{
		won = 1;
	}
	else
	{
		won = 0;
	}
	if(piece ==1)
	{
		reset_board(board, row, col);
	}
	return won;
}

int computer_move(char board[3][3], char player, unsigned int *row, unsigned int *col)
{
	for(int i=0; i<3; i++)
	{
		for(int j=0; j<3; j++)
		{
			if(board[i][j] == '*')
			{
				place_piece(board,player,i,j);
                // Grader: You want to set *row = i because you want to set the
                // contents of row to i. &row sets the pointer to row to i
				//&row = i;
				//&col = j;
				return 1;
			}
		}
	return 0;
	}
}

char next_player_turn(char player)
{
	if(player == 'X')
	{
		return 'O';
	}
	else
	{
		return 'X';
	}
}

int board_full(char board[3][3])
{
	for(int i=0; i<3; i++)
	{
		for(int j=0; j<3; j++)
		{
			if(board[i][j] == '*')
			{
				return 0;
			}
		}
	return 1;
	}
}

//char play(char board[3][3],char player, row, pla)
void play_tic_tac_toe()
{
	char board[3][3];
	init_board(board);
	unsigned int col_player = 0;
	unsigned int row_player = 0;
	char player = 'X';
	do
	{
		next_player_turn(player);
		printf("Player %c, in what row (0-2) will you place your next piece? ",player); 
		scanf("%u", &row_player); 
		if(row_player > 2)
		{
			printf("Player %c, that is not a valid row. Try again. \n",player);
			printf("Player %c, in what row (0-2) will you place your next piece? ",player); 
			scanf("%u", &row_player); 
		}
		printf("Player %c, in what column (0-2) will you place your next piece? ",player); 
		scanf("%u",&col_player);
		if(col_player>2)
		{
			printf("Player %c, that is not a valid column. Try again. \n",player);
			printf("Player %c, in what column (0-2) will you place your next piece? ",player); 
			scanf("%u",&col_player); 
		} 
		if(player_won(board,player,row_player,col_player) == 1)
		{
			place_piece(board,player,row_player,col_player);
			print_tic_tac_toe_board(board);
			printf("Congratulations! Player %c won!",player); 
			return;
		}

		if(board_full(board) == 1)
		{
			place_piece(board,player,row_player,col_player);
			print_tic_tac_toe_board(board);
			printf("Tie Game! \n");
			return;
		}

		if(place_piece(board,player,row_player,col_player) == 0)
		{
			print_tic_tac_toe_board(board);
			printf("Player %c, Not a valid move. Try agin. \n",player);
		}
		else
		{
			place_piece(board,player,row_player,col_player);
			print_tic_tac_toe_board(board);
			if(player == 'X')
			{
				player = 'O';
			}

			else if(player == 'O')
			{
				player = 'X';
			}
		}
	}
	while(player_won(board,player,row_player,col_player) == 0);
}


